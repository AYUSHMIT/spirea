From Equations Require Import Equations.

From iris.algebra Require Import functions gmap agree excl csum.
From iris.proofmode Require Import classes tactics.
From iris.base_logic.lib Require Export iprop own invariants.
From iris.prelude Require Import options.

From self Require Import extra basic_nextgen_modality gen_trans gen_single_shot.
From self Require Import hvec.

Import uPred.

(** Data describing the cameras that a given camera depends on. *)
Definition deps n := ivec n cmra.
Bind Scope ivec_scope with deps.

Section types.
  (* Implicit Type (n : nat) (DS : deps n) (A : cmra). *)

  (** A transformation over the carrier of [A]. *)
  Definition cmra_to_trans A := cmra_car A ‚Üí cmra_car A.

  (** A predicate over a transformation over [A]. *)
  Definition cmra_to_pred A := (cmra_to_trans A) ‚Üí Prop.

  (* Definition deps_to_trans {n} DS : ivec Type n := *)
  (*   ivec_fmap (Œª A, cmra_car A ‚Üí cmra_car A) DS. *)

  Definition pred_over {n} (DS : deps n) A :=
    iimpl cmra_to_trans DS ((A ‚Üí A) ‚Üí Prop).

  Definition True_pred {n} {DS : deps n} {A} : pred_over DS A :=
    hcurry (Œª _ _, True).

  (* This results in the type:
     [(max_nat ‚Üí max_nat) ‚Üí (excl () ‚Üí excl ()) ‚Üí (nat ‚Üí nat) ‚Üí Prop] *)
  Compute (pred_over [max_natR; exclR unitO] natR).

  (* Definition to_pred_ty DS : ivec Type := ivec_fmap cmra_to_pred DS. *)

End types.

Notation trans_for := (hvec cmra_to_trans).
Definition trans_for_alt n (DS : deps n) := hvec id n (cmra_to_trans <$> DS).

Notation preds_for := (hvec cmra_to_pred).

(* trans_for_alt does not give universe issue. *)
Definition test_exist {Œ£} {n : nat} {DS : deps n} : iProp Œ£ :=
  ‚àÉ (ts : trans_for_alt n DS), ‚åú True ‚åù.

(* trans_for _does_ give universe issue. The root cause is the way the [cmra] appears in the type. In [trans_for_alt] the occurence of [cmra_car] prevents the universe issue somehow. *)
(* Definition test_exist {Œ£} {n : nat} {DS : ivec cmra n} : iProp Œ£ := *)
(*   ‚àÉ (ts : trans_for n DS), ‚åú True ‚åù. *)

(* The functor in [Œ£] at index [i] applied to [iProp]. *)
Notation R Œ£ i := (rFunctor_apply (gFunctors_lookup Œ£ i) (iPropO Œ£)).
(* The functor in [Œ£] at index [i] applied to [iPreProp]. *)
Notation Rpre Œ£ i := (rFunctor_apply (gFunctors_lookup Œ£ i) (iPrePropO Œ£)).
Notation T Œ£ i := (R Œ£ i ‚Üí R Œ£ i).

Record promise {Œ£} := MkPromise {
    promise_g : gname; (* Ghost name for the promise. *)
    promise_i : gid Œ£; (* The index of the RA in the global RA. *)
    promise_n : nat; (* The number of dependencies. *)
    promise_deps : list nat; (* Indices in the list of promises of the dependencies. *)
    promise_RAs : ivec promise_n (gid Œ£);
    (* The predicate that relates our transformation to those of the dependencies. *)
    promise_rel : hvec (Œª (i : gid Œ£), T Œ£ i : Type) promise_n promise_RAs ‚Üí T Œ£ promise_i ‚Üí Prop;
    promise_pred : T Œ£ promise_i ‚Üí Prop;
    (* rel_impl_pred : ; *)
    (* deps_preds : foo; *)
    (* witness : foo; *)
}.

(* TODO: Adapt this. *)
Definition generational_cmra A : Type := A.
  (* option (agree (A ‚Üí A)) * GTS (A ‚Üí A) * option A. *)
Definition generational_cmraR (A : cmra) := A.
  (* prodR (prodR (optionR (agreeR (leibnizO (A ‚Üí A)))) (GTSR (A ‚Üí A))) (optionR A). *)

Definition promise_consistent {Œ£} (promises : list (@promise Œ£)) p i :=
  ‚àÄ x j,
    p.(promise_deps) !! x = Some j ‚Üí
    j < i ‚àß (* The dependency is prior in the list. *)
    ‚àÉ p_d M,
      promises !! j = Some p_d ‚àß
      p.(promise_RAs) !! x = Some M ‚àß
      p_d.(promise_i) = M.

Definition promises_consistent {Œ£} (promises : list (@promise Œ£)) :=
  ‚àÄ i p, promises !! i = Some p ‚Üí promise_consistent promises p i.

Class genInG {n} (Œ£ : gFunctors) (A : cmra) (DS : deps n) := GenInG {
  genInG_id : gid Œ£;
  genInG_apply := rFunctor_apply (gFunctors_lookup Œ£ genInG_id);
  (* genInG_gti : gen_trans_info Œ£ (genInG_id); *)
  (* genInG_gen_trans : Œ©.(g_valid_gt) (genInG_id) = Some2 genInG_gti; *)
  (* genInG_gti_typ : A = genInG_gti.(gti_car); *)
  genInG_prf : A = genInG_apply (iPropO Œ£) _;
  (* genInG_gen_trans2 : *)
  (*   genInG_gti.(gti_valid) = *)
  (*     (gen_transport (gen_cmra_eq genInG_gti_typ genInG_gti.(gti_look)) (lift g)); *)
}.

(* Knowledge that [A] is a resource, with the information about its dependencies
hidden in the dependent pair. *)
Class genInSelfG (Œ£ : gFunctors) (A : cmra) := GenInG2 {
  genInSelfG_n : nat;
  genInSelfG_DS : deps genInSelfG_n;
  genInSelfG_gen : genInG Œ£ A (genInSelfG_DS);
}.

Global Arguments genInG_id {_ _ _ _} _.

Global Program Instance genInG_inG {n} {DS : deps n} `{i : !genInG Œ£ A DS} :
      inG Œ£ (generational_cmraR A) :=
  {|
    inG_id := genInG_id i;
    inG_prf := genInG_prf; (* gen_cmra_eq genInG2_gti_typ genInG2_gti.(gti_look); *)
  |}.

(*
How to represent the dependencies?

We need
- To be able to store both a collection of ..
  - .. the types of the dependencies [A : Type, ..]
  - .. transformation functions matching the types of the dependencis [t : A ‚Üí A, ..]
  - .. predicates over the transformation functions.
- We need to be able to map over the types.
- To be able to do an ‚àß or a ‚àó over the transformation functions.
*)

(** The transformations [ts] satisfies the predicates [ps]. *)
Equations preds_hold_alt {n} {DS : deps n}
    (ts : trans_for_alt n DS) (ps : preds_for n DS) : Prop :=
  | hcons t ts', hcons p ps' := p t ‚àß preds_hold_alt ts' ps' ;
  | hnil, hnil := True.
Global Transparent preds_hold_alt.

(** The transformations [ts] satisfies the predicates [ps]. *)
Equations preds_hold {n} {DS : deps n}
    (ts : trans_for n DS) (ps : preds_for n DS) : Prop :=
  | hcons t ts', hcons p ps' := p t ‚àß preds_hold ts' ps' ;
  | hnil, hnil := True.
Global Transparent preds_hold.

Definition dummy_use_ing {n : nat} {DS : deps n} `{!genInG Œ£ A DS} := True.

Section rules.
  Context {n : nat} {DS : deps n} `{!genInG Œ£ A DS}.

  Definition gen_own (Œ≥ : gname) (a : A) : iProp Œ£ := own Œ≥ a.
    (* own Œ≥ (None, (None, None), Some a). *)

  (** Ownership over the token for [Œ≥]. *)
  Definition token  (Œ≥ : gname) (Œ≥s : ivec n gname)
    (R : pred_over DS A) (P : (A ‚Üí A) ‚Üí Prop) : iProp Œ£ :=
    ‚åú dummy_use_ing ‚åù.

  (** Knowledge that Œ≥ is accociated with the predicates R and P. *)
  Definition rely (Œ≥ : gname) (Œ≥s : ivec n gname)
    (R : pred_over DS A) (P : (A ‚Üí A) ‚Üí Prop) : iProp Œ£ :=
    ‚åú dummy_use_ing ‚åù.

  Definition rely_self {B} `{i : !genInSelfG Œ£ B}
      (Œ≥ : gname) (P : (B ‚Üí B) ‚Üí Prop) : iProp Œ£ :=
    ‚åú True ‚åù.

  Lemma own_gen_alloc (a : A) Œ≥s :
    ‚úì a ‚Üí ‚ä¢ |==> ‚àÉ Œ≥, gen_own Œ≥ a ‚àó token Œ≥ Œ≥s True_pred (Œª _, True%type).
  Proof. Admitted.

  Definition trans_in {B} (Œ≥ : gname) (t : B ‚Üí B) : iProp Œ£ :=
    ‚åú dummy_use_ing ‚åù%I.

  (** Strengthen a promise. *)
  Lemma token_strengthen_promise `{‚àÄ (i : fin n), genInSelfG Œ£ (DS !!! i)}
      Œ≥ Œ≥s (deps_preds : preds_for n DS)
      (R_1 R_2 : pred_over DS A) (P_1 P_2 : (A ‚Üí A) ‚Üí Prop) :
    (* The new relation is stronger. *)
    (‚àÄ (ts : trans_for n DS) (t : A ‚Üí A),
       huncurry R_1 ts t ‚Üí huncurry R_2 ts t ‚àß P_2 t) ‚Üí
    (* The new predicate is stronger. *)
    (‚àÄ t, P_1 t ‚Üí P_2 t) ‚Üí
    (* The new relation implies the predicate. *)
    (‚àÄ ts t, huncurry R_2 ts t ‚Üí P_2 t) ‚Üí
    (* Evidence that the promise is realizeable. *)
    (‚àÄ (ts : trans_for n DS),
      preds_hold ts deps_preds ‚Üí ‚àÉ (e : A ‚Üí A), (huncurry R_2) ts e) ‚Üí
    (* For every dependency we own a [rely_self]. *)
    (‚àÄ (i : fin n), rely_self (Œ≥s !!! i) (deps_preds üëÄ i)) -‚àó
    token Œ≥ Œ≥s R_1 P_1 -‚àó (* Old token. *)
    token Œ≥ Œ≥s R_2 P_2. (* Updated token. *)
  Proof.
  Admitted.

  Lemma token_nextgen Œ≥ Œ≥s (R : pred_over DS A) P :
    token Œ≥ Œ≥s R P ‚ä¢ token Œ≥ Œ≥s R P.
  Proof. Admitted.

  Lemma rely_nextgen Œ≥ Œ≥s (R : pred_over DS A) P :
    rely Œ≥ Œ≥s R P
    ‚ä¢ rely Œ≥ Œ≥s R P ‚àó
      ‚àÉ (t : A ‚Üí A),
      ‚åú ‚àÉ (ts : trans_for n DS),
        huncurry R ts t ‚àß (* The transformations satisfy the promise. *)
        P t ‚åù ‚àó (* For convenience we also get this directly. *)
      trans_in Œ≥ t ‚àó
      (‚àÉ  (ts' : trans_for_alt n DS), (* Temp universe workaround. *)
        (‚àÄ (i : fin n), trans_in (Œ≥s !!! i) (hvec_lookup_fmap ts' i))).
  Proof. Admitted.

  Lemma token_to_rely Œ≥ Œ≥s (R : pred_over DS A) P :
    token Œ≥ Œ≥s R P ‚ä¢ rely Œ≥ Œ≥s R P.
  Proof. Admitted.

End rules.

Equations forall_fin_2 (P : fin 2 ‚Üí Type) : P 0%fin * P 1%fin ‚Üí ‚àÄ (i : fin 2), P i :=
| P, p, 0%fin => fst p
| P, p, 1%fin => snd p.

(* This is a hacky way to find all the [genInSelfG] instances when there are
exactly two dependencies. It would be nicer with a solution that could iterate
over all the dependencies during type class resolution (maybe inspired by
[TCForall] for lists). *)
Global Instance genInG_forall_2 {Œ£ n m} {DS1 : deps n} {DS2 : deps m}
  `{!genInG Œ£ A DS1} `{!genInG Œ£ B DS2} :
  ‚àÄ (i : fin 2), genInSelfG Œ£ ([A; B]%IL !!! i).
Proof.
  apply forall_fin_2.
  split.
  - apply (GenInG2 _ _ n DS1 _).
  - apply (GenInG2 _ _ m DS2 _).
Qed.

Section test.
  Context `{max_i : !inG Œ£ max_natR}.
  Context `{i : !genInG Œ£ max_natR [max_natR; max_natR] }.

  Definition a_rely :=
    rely (1%positive) [2%positive; 3%positive] (Œª Ta Tb Ts, Ta = Ts ‚àß Tb = Ts) (Œª _, True).

  Section test.
    Variables (A : cmra) (B : cmra) (T1 : A ‚Üí A) (T2 : B ‚Üí B)
      (P1 : (A ‚Üí A) ‚Üí Prop) (P2 : (B ‚Üí B) ‚Üí Prop).

    Definition TS : trans_for _ _ := [T1; T2].
    Definition PS : preds_for _ _ := [P1; P2].
    Compute (preds_hold (DS := [A; B]) TS PS).

    Context `{!genInG Œ£ B [] }.
    Context `{!genInG Œ£ A [A; B] }.

    Lemma foo2 (Œ≥ : gname) (Œ≥s : ivec 2 gname) : True.
    Proof.
      pose proof (token_strengthen_promise Œ≥ Œ≥s PS) as st.
      rewrite /pred_over in st.
      rewrite /cmra_to_trans in st.
      simpl in st.
    Abort.

  End test.

  Definition a_rel (Ta : max_natR ‚Üí max_natR) Tb Ts :=
    Ta = Ts ‚àß Tb = Ts.

End test.
